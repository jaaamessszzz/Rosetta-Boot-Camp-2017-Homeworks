In this exercise, you will write C++ code to perform Monte Carlo simulated annealing,
which are key algorithms for protein design and structure prediction in Rosetta.

In a generic Rosetta protocol, we start with a protein structure, represented and stored in a Pose class.
Then, we perturb the structure in intelligent ways to "sample" new conformations/sequences,
followed by checking the "score" of the new structure, comparing it with the score of the previous conformation,
and decide whether to accept the new structure or reject it (typically using a Boltzmann factor).
As the simulation progresses, a structure nearer to the lowest global score minima should be reached.

In this exercise, we will deal with a much simpler version of this process, outside of the complications
of the main Rosetta codebase.
For various "score" functions, z = f(x, y), we will use simulated annealing process to find the (x, y) point
which gives the global minimum of z, where z corresponds to the score of the (x, y) point.
Starting with an arbitrary point (x, y), we calculate z, and then pertub the (x, y) point by a random delta.
We then calculate and compare the new z with previous z, to decide whether to accept this new (x, y) or not,
using the boltzmann function you will implement in the MonteCarlo class.
Finally, at the end of the simulation, we can find the (x, y) close to the global minima of the landscape.

We have created several classes, functions, and files to get you started. You shouldn't need to write
any additional code in these files (unless you so desire).
1) Landscape.cc
   This class contains implementations of "energy landscapes" of the form z = f(x, y)
   Three functions are implemented: ackley, ratrigin, or sum_squares.
2) main.cc
   This program, when compiled and run as ./main, provides a user-facing interface to the code, that you
   can use to try running a simulation using any of the defined landscapes, and starting (x, y) points
3) test.cc
   This program, when compiled and run as ./test, automatically runs simulations on all defined landscapes, and
   a combination of different (x, y) starting points.
4) Makefile
   Since this homework contains multiple .cc/.hh files, the Makefile provides an easy way to compile
   the "main" and "test" binaries. Run the command "make" in this folder to compile the binaries and
   run tests.
5) test_program.sh
   This script runs the "test" binary and compares the output against expected output from our implementation
6) Uniform
   Since the Monte Carlo method relys relys on randomness, we here generate uniformly distributed random numbers. If you do not modify this class (or its seed), your program should be able to produce output that matches our expected output.
7) run.cc
   The actual simulation code (similar to a Rosetta "apply" function).

There are two classes we have provided function definitions for in .hh files, you will need
to complete the unfinished "stub" functions in the corresponding .cc files.
1) Coordinates.hh/Coordinates.cc
   This class stores the (x, y) points and calculates the z value/score from (x, y) and the stored
   landscape function. It provides getters/setters to access the (x, y) values, retrieve them,
   and modify them by a given delta. 
   When a Coordinates object is initialized or modified, the z value should be recomputed.

2) MonteCarlo.hh/MonteCarlo.cc
   This class contains the main functionality you will need to implement in this assignment:
   the boltzmann function which decides whether to accept or reject a new (x, y) point.

To compile/test this assignment:
Type "make" in the command line to compile both the "test" and "main" binaries, and run the test binary.
(Requires having the make and diff command line applications installed)
